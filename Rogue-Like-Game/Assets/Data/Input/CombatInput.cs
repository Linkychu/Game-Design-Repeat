//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Data/Input/CombatInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CombatInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CombatInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CombatInput"",
    ""maps"": [
        {
            ""name"": ""Knight"",
            ""id"": ""afea0813-ea0d-4cbe-827b-1fdff2a95bf6"",
            ""actions"": [
                {
                    ""name"": ""Attack 1"",
                    ""type"": ""Button"",
                    ""id"": ""f77087e8-2dd0-4d15-b86f-6a715a230d32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap(tapCount=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack 2"",
                    ""type"": ""Button"",
                    ""id"": ""d14efd27-0972-4ed2-9b11-03ac5e618a78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack 3"",
                    ""type"": ""Button"",
                    ""id"": ""3a839ade-16ca-4505-bfe0-490b69680979"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap(tapCount=3)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""86ffacac-5bbc-43ee-a33a-1d9785f9a934"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Attack 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8cb57d20-b31b-420b-8728-04adb22e4031"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Attack 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c56525cb-27c2-450a-912a-d27012e67ea7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Attack 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Knight
        m_Knight = asset.FindActionMap("Knight", throwIfNotFound: true);
        m_Knight_Attack1 = m_Knight.FindAction("Attack 1", throwIfNotFound: true);
        m_Knight_Attack2 = m_Knight.FindAction("Attack 2", throwIfNotFound: true);
        m_Knight_Attack3 = m_Knight.FindAction("Attack 3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Knight
    private readonly InputActionMap m_Knight;
    private IKnightActions m_KnightActionsCallbackInterface;
    private readonly InputAction m_Knight_Attack1;
    private readonly InputAction m_Knight_Attack2;
    private readonly InputAction m_Knight_Attack3;
    public struct KnightActions
    {
        private @CombatInput m_Wrapper;
        public KnightActions(@CombatInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack1 => m_Wrapper.m_Knight_Attack1;
        public InputAction @Attack2 => m_Wrapper.m_Knight_Attack2;
        public InputAction @Attack3 => m_Wrapper.m_Knight_Attack3;
        public InputActionMap Get() { return m_Wrapper.m_Knight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KnightActions set) { return set.Get(); }
        public void SetCallbacks(IKnightActions instance)
        {
            if (m_Wrapper.m_KnightActionsCallbackInterface != null)
            {
                @Attack1.started -= m_Wrapper.m_KnightActionsCallbackInterface.OnAttack1;
                @Attack1.performed -= m_Wrapper.m_KnightActionsCallbackInterface.OnAttack1;
                @Attack1.canceled -= m_Wrapper.m_KnightActionsCallbackInterface.OnAttack1;
                @Attack2.started -= m_Wrapper.m_KnightActionsCallbackInterface.OnAttack2;
                @Attack2.performed -= m_Wrapper.m_KnightActionsCallbackInterface.OnAttack2;
                @Attack2.canceled -= m_Wrapper.m_KnightActionsCallbackInterface.OnAttack2;
                @Attack3.started -= m_Wrapper.m_KnightActionsCallbackInterface.OnAttack3;
                @Attack3.performed -= m_Wrapper.m_KnightActionsCallbackInterface.OnAttack3;
                @Attack3.canceled -= m_Wrapper.m_KnightActionsCallbackInterface.OnAttack3;
            }
            m_Wrapper.m_KnightActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack1.started += instance.OnAttack1;
                @Attack1.performed += instance.OnAttack1;
                @Attack1.canceled += instance.OnAttack1;
                @Attack2.started += instance.OnAttack2;
                @Attack2.performed += instance.OnAttack2;
                @Attack2.canceled += instance.OnAttack2;
                @Attack3.started += instance.OnAttack3;
                @Attack3.performed += instance.OnAttack3;
                @Attack3.canceled += instance.OnAttack3;
            }
        }
    }
    public KnightActions @Knight => new KnightActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IKnightActions
    {
        void OnAttack1(InputAction.CallbackContext context);
        void OnAttack2(InputAction.CallbackContext context);
        void OnAttack3(InputAction.CallbackContext context);
    }
}
